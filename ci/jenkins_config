pipeline {
  agent none

    environment {
      CODECOV_TOKEN = "1860986c-371d-4258-8eff-f164be875494"
      OMP_NUM_THREADS = 2
    }

    stages {
      stage('Test') {
        parallel {
          stage('CPU') {
            agent {
              docker {
                image "rombur/adamantine-stack:latest"
                  alwaysPull true
                  label 'docker'
              }
            }
            steps {
              sh 'rm -rf build && mkdir -p build'
                dir('build') {
                  sh '''#!/bin/bash
                    cmake \
                    -D CMAKE_BUILD_TYPE=Release \
                    -D ADAMANTINE_ENABLE_TESTS=ON \
                    -D ADAMANTINE_ENABLE_COVERAGE=ON \
                    -D CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic" \
                    -D DEAL_II_DIR=${DEAL_II_DIR} \
                    ..
                  '''
                  sh 'make -j8'
                  sh 'ctest --no-compress-output -R test_ -T Test'
                  sh 'make coverage'
                  sh '''#!/bin/bash
                    bash <(curl -s https://codecov.io/bash)
                 '''
                }
            }
            post {
              always {
                xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
              }
            }
          }

          stage('clang-sanitizer') {
            agent {
              docker {
                image "rombur/adamantine-stack:latest"
                  args '--cap-add SYS_PTRACE'
                  alwaysPull true
                  label 'docker'
              }
            }
            environment {
              ASAN_SYMBOLIZER_PATH = '/usr/lib/llvm-10/bin/llvm-symbolizer'
              LSAN_OPTIONS = "suppressions=$WORKSPACE/ci/address_blacklist.txt"
              ASAN_OPTIONS = 'fast_unwind_on_malloc=0'
              OMPI_C = 'clang'
              OMPI_CXX = 'clang++'
              OMP_NUM_THREADS = 1
              DEAL_II_NUM_THREADS = 1
            }
            steps {
              sh 'rm -rf build && mkdir -p build'
                dir('build') {
                  sh '''#!/bin/bash
                    cmake \
                    -D CMAKE_BUILD_TYPE=Debug \
                    -D CMAKE_CXX_COMPILER=clang++ \
                    -D ADAMANTINE_ENABLE_TESTS=ON \
                    -D ADAMANTINE_ENABLE_COVERAGE=OFF \
                    -D CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic -fsanitize=address" \
                    -D CMAKE_EXE_LINKER_FLAGS="-fsanitize=address" \
                    -D DEAL_II_DIR=${DEAL_II_DIR} \
                    ..
                  '''
                  sh 'make -j8'
                  sh 'ctest --no-compress-output -R test_ -T Test'
                }
            }
            post {
              always {
                xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
              }
            }
          }

          stage('CUDA') {
            agent {
              docker {
                image "rombur/adamantine-stack:latest"
                  alwaysPull true
                  label 'nvidia-docker && volta'
              }
            }
            steps {
              sh 'rm -rf build && mkdir -p build'
                dir('build') {
                  sh '''#!/bin/bash
                    cmake \
                    -D CMAKE_BUILD_TYPE=Debug \
                    -D ADAMANTINE_ENABLE_TESTS=ON \
                    -D ADAMANTINE_ENABLE_CUDA=ON \
                    -D ADAMANTINE_ENABLE_COVERAGE=OFF \
                    -D CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic" \
                    -D DEAL_II_DIR=${DEAL_II_DIR} \
                    ..
                  '''
                  sh 'make -j8'
                  sh 'ctest --no-compress-output -R test_ -T Test'
                }
            }
            post {
              always {
                xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
              }
            }
          }
        }
      }
    }
}
